/* eslint-disable */
import { ObjectId } from 'mongodb';
import sha1 from 'sha1';
import Queue from 'bull';
import dbClient from '../utils/db';
import userUtils from '../utils/user';
/* eslint-disable */

const userQueue = new Queue('userQueue');

class UsersController {
  /**
   * Creates a user using email and password
   *
   * To create a user, you must specify an email and a password
   * If the email is missing, return an error Missing email with
   * a status code 400
   * If the password is missing, return an error Missing password with
   * a status code 400
   * If the email already exists in DB, return an error Already exist with
   * a status code 400
   * The password must be stored after being hashed in SHA1
   * The endpoint is returning the new user with only the email and the id
   * (auto generated by MongoDB) with a status code 201
   * The new user must be saved in the collection users:
   * email: same as the value received
   * password: SHA1 value of the value received
   */

  static async postNew(request, response) {
    const { email, password } = request.body;

    // Check if email or password is missing
    if (!email) {
      return response.status(400).json({ error: 'Missing email' });
    }

    if (!password) {
      return response.status(400).json({ error: 'Missing password' });
    }

    try {
      // Check if email already exists
      const emailExists = await dbClient.usersCollection().findOne({ email });
      if (emailExists) {
        return response.status(400).json({ error: 'Already exists' });
      }

      // Hash the password (replace with bcrypt or Argon2 for better security)
      const hashedPassword = sha1(password); // Replace with more secure hashing

      // Insert the new user into the database
      const result = await dbClient.usersCollection().insertOne({
        email,
        password: hashedPassword,
      });


      // Return the newly created user's email and ID
      const user = {
        id: result.insertedId,
        email,
      };

      return response.status(201).json(user);
    } catch (error) {
      console.error('Error creating user:', error);
      return response.status(500).json({ error: 'Error creating user' });
    }
  }
}

   /**
   *
   * Should retrieve the user base on the token used
   *
   * Retrieve the user based on the token:
   * If not found, return an error Unauthorized with a
   * status code 401
   * Otherwise, return the user object (email and id only)
   */
  
  static async getMe(request, response) {
    try {
      const { userId } = await userUtils.getUserIdAndKey(request);

      const user = await userUtils.getUser({
        _id: ObjectId(userId),
      });

      if (!user) {
        return response.status(401).json({ error: 'Unauthorized' });
      }

      const { _id, password, ...processedUser } = user; // Omit password and _id from the response

      return response.status(200).json(processedUser);
    } catch (error) {
      console.error('Error fetching user:', error);
      return response.status(500).json({ error: 'Internal Server Error' });
    }
  }
}

export default UsersController;
